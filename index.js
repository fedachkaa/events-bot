import dotenv from 'dotenv';
import TelegramBot from 'node-telegram-bot-api';
import * as EventsController from './controllers/EventsController.js';
import * as UserController from './controllers/UserController.js';
import startServerAndDB from './server.js';
import * as Formatter from './utils/format.js';

dotenv.config();

startServerAndDB();

const token = process.env.TOKEN;

const bot = new TelegramBot(token, { polling: true });

bot.onText(/\/start/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –ø–æ–¥—ñ–π. –¢—É—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏–º—É—Ç—å—Å—è —Ä—ñ–∑–Ω—ñ –ø–æ–¥—ñ—ó —Ç–≤–æ–≥–æ –º—ñ—Å—Ç–∞!',
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å', callback_data: 'signup' },
            { text: '–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å', callback_data: 'auth' },
          ],
        ],
      },
    },
  );
});

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const user = query.from;
  const buttonClicked = query.data;
  const inlineKeyboard = {
    inline_keyboard: [
      [{ text: '–£—Å—ñ –ø–æ–¥—ñ—ó', callback_data: 'allEvents' }],
      [{ text: '–ü–æ–¥—ñ—ó –ø–æ —Ç–µ–≥—É', callback_data: 'eventByTag' }],
      [{ text: '–ü–æ–¥—ñ—ó –ø–æ –º—ñ—Å—Ç—É', callback_data: 'eventsByCity' }],
      [{ text: '–ú–æ—ó –ø–æ–¥—ñ—ó', callback_data: 'myEvents' }],
    ],
  };

  switch (true) {
    case buttonClicked === 'signup':
      try {
        if (await UserController.userExists(user.id)) throw new Error('User already exists');
        bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *–º—ñ—Å—Ç–æ*:', {
          parse_mode: 'Markdown',
        });
        bot.on('message', (msg) => {
          UserController.signup(msg.from, msg.text);
          bot.sendMessage(chatId, '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!');
        });
      } catch (err) {
        const inlineKeyboardAuth = {
          inline_keyboard: [
            [{ text: '–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å', callback_data: 'auth' }],
          ],
        };
        bot.sendMessage(
          chatId,
          '–í–∏ —É–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –±—É–¥—å –ª–∞—Å–∫–∞:',
          {
            reply_markup: inlineKeyboardAuth,
          },
        );
      }
      break;

    case buttonClicked === 'auth':
      bot.sendMessage(
        chatId,
        `–ü—Ä–∏–≤—ñ—Ç, ${user.first_name}, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!`,
        {
          reply_markup: inlineKeyboard,
        },
      );
      break;

    case buttonClicked === 'allEvents': {
      const events = await EventsController.getAllEvents();
      events.forEach((event) => {
        bot.sendPhoto(chatId, `${event.img}`, {
          caption: Formatter.formatEventMessage(event),
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ üåê', url: `${event.link}` },
                {
                  text: '–ó–±–µ—Ä–µ–≥—Ç–∏ ‚ù§Ô∏è',
                  callback_data: `saveEvent ${event.id}`,
                },
              ],
              [{ text: '–ú–µ–Ω—é', callback_data: 'menu' }],
            ],
          },
        });
      });
      break;
    }

    case buttonClicked.includes('saveEvent'):
      try {
        const id = buttonClicked.split(' ')[1];
        const res = await EventsController.saveEvent(user.id, id);
        bot.sendMessage(chatId, `–ü–æ–¥—ñ—è ${res.title} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!`, {
          reply_markup: inlineKeyboard,
        });
      } catch (err) {
        console.log(err);
        bot.sendMessage(chatId, '–ü–æ–¥—ñ—è —É–∂–µ —î –≤ —Å–ø–∏—Å–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–¥—ñ–π!', {
          reply_markup: inlineKeyboard,
        });
      }
      break;

    case buttonClicked === 'myEvents': {
      const userEvents = await EventsController.userEvents(user.id);
      if (userEvents.length) {
        const text = Formatter.formatUserEvents(userEvents);
        bot.sendMessage(chatId, text, {
          parse_mode: 'HTML',
          reply_markup: inlineKeyboard,
        });
      } else {
        bot.sendMessage(chatId, '–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–¥—ñ–π.', {
          reply_markup: inlineKeyboard,
        });
      }
      break;
    }

    case buttonClicked === 'menu':
      bot.sendMessage(chatId, '–ú–µ–Ω—é:', { reply_markup: inlineKeyboard });
      break;
    default:
      bot.sendMessage(chatId, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ');
  }

  bot.answerCallbackQuery(query.id);
});

/// GEOLOCATION
// bot.onText(/\/location/, (msg) => {
//   const chatId = msg.chat.id;
//   const messageId = msg.message_id;

//   // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
//   bot.sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è.", {
//     reply_markup: {
//       keyboard: [
//         [
//           {
//             text: "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è",
//             request_location: true, // –í–∫–ª—é—á–∞—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é
//           },
//         ],
//       ],
//       one_time_keyboard: true, // –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
//     },
//   });
// });

// bot.on("location", (msg) => {
//   const chatId = msg.chat.id;
//   const latitude = msg.location.latitude;
//   const longitude = msg.location.longitude;

//   UserController.getGeolocation(msg.location);

//   bot.sendMessage(chatId, `–í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è: ${latitude}, ${longitude}`);
// });

// bot.on("message", (msg) => {
//   const allEvents = "—É—Å—ñ –ø–æ–¥—ñ—ó";
//   if (msg.text.toString().toLowerCase() === allEvents) {
//     bot.sendMessage(msg.chat.id, "–¢—É—Ç –±—É–¥—É—Ç—å —É—Å—ñ –ø–æ–¥—ñ—ó.");
//   }
//   const eventsByTag = "–ø–æ–¥—ñ—ó –ø–æ —Ç–µ–≥—É";
//   if (msg.text.toString().toLowerCase() === eventsByTag) {
//     bot.sendMessage(msg.chat.id, "–¢—É—Ç –±—É–¥—É—Ç—å –ø–æ–¥—ñ—ó –ø–æ –æ–±—Ä–∞–Ω–æ–º—É —Ç–µ–≥—É.");
//   }
//   const eventsByCity = "–ø–æ–¥—ñ—ó –ø–æ –º—ñ—Å—Ç—É";
//   if (msg.text.toString().toLowerCase() === eventsByCity) {
//     bot.sendMessage(msg.chat.id, "–¢—É—Ç –±—É–¥—É—Ç—å –ø–æ–¥—ñ—ó –≤ –æ–±—Ä–∞–Ω–æ–º—É –º—ñ—Å—Ç—ñ.");
//   }
//   const myEvents = "–º–æ—ó –ø–æ–¥—ñ—ó";
//   if (msg.text.toString().toLowerCase() === myEvents) {
//     bot.sendMessage(msg.chat.id, "–¢—É—Ç –±—É–¥—É—Ç—å –≤–∞—à—ñ –ø–æ–¥—ñ—ó.");
//   }
// });
